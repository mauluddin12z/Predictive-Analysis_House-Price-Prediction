# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BV92xpKIaGRCP06ChfxR707w95SxyI-D

#**Data Collection**
"""

!pip install -q kaggle

from google.colab import files
files.upload()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

!mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d varintornsithisint/bangkok-housing-condo-apartment-prices

! mkdir bangkok-housing-condo-apartment-prices

! unzip bangkok-housing-condo-apartment-prices.zip -d bangkok-housing-condo-apartment-prices

properties = pd.read_csv('bangkok-housing-condo-apartment-prices/Bangkok Housing Condo Apartment Prices.csv')
properties

"""#**Data Understanding**

**Variabel-variabel pada dataset sebagai berikut:**

- Property Type: Tipe Properti seperti Rumah, Apartemen, dan lain lain.
- Location: Lokasi properti
- Area (sq. ft.): Ukuran Area
- Bedroom: Jumlah kamar tidur
- Bathroom: Jumlah kamar mandi
- Price: harga dalam mata uang Thailand (THB) atau bath dan merupakan fitur target
"""

properties.info()

properties.nunique()

properties.describe()

properties.isnull().sum()

"""##**EDA - Handling Outliers:**"""

sns.boxplot(x=properties['Area (sq. ft.)'])

sns.boxplot(x=properties['Bedrooms'])

sns.boxplot(x=properties['Bathrooms'])

sns.boxplot(x=properties['Price (THB)'])

Q1 = properties.quantile(0.25)
Q3 = properties.quantile(0.75)
IQR=Q3-Q1
diamonds=properties[~((properties<(Q1-1.5*IQR))|(properties>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
properties.shape

"""##**EDA - Univariate Analysis**"""

numerical_features = properties.select_dtypes(include=np.number).columns.tolist()
categorical_features = properties.select_dtypes(include=["object"]).columns.tolist()

numerical_features

categorical_features

feature = categorical_features[0]
count = properties[feature].value_counts()
percent = 100*properties[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

feature = categorical_features[1]
count = properties[feature].value_counts()
percent = 100*properties[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

properties

properties.hist(bins=50, figsize=(20,15))
plt.show()

"""#**EDA - Multivariate Analysis**"""

cat_features = properties.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="Price (THB)", kind="bar", dodge=False, height = 4, aspect = 3,  data=properties, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(properties, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = properties.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""#**Data Preparation**"""

from sklearn.preprocessing import  OneHotEncoder
properties = pd.concat([properties, pd.get_dummies(properties['Property Type'], prefix='Property Type')],axis=1)
properties = pd.concat([properties, pd.get_dummies(properties['Location'], prefix='Location')],axis=1)
properties.drop(['Property Type','Location'], axis=1, inplace=True)
properties.head()

sns.pairplot(properties[['Area (sq. ft.)','Bedrooms', 'Bathrooms']], plot_kws={"s": 3});

from sklearn.decomposition import PCA
 
pca = PCA(n_components=3, random_state=123)
pca.fit(properties[['Area (sq. ft.)','Bedrooms', 'Bathrooms']])
princ_comp = pca.transform(properties[['Area (sq. ft.)','Bedrooms', 'Bathrooms']])

pca.explained_variance_ratio_.round(3)

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=123)
pca.fit(properties[['Area (sq. ft.)','Bedrooms', 'Bathrooms']])
properties['dimension'] = pca.transform(properties.loc[:, ('Area (sq. ft.)','Bedrooms', 'Bathrooms')]).flatten()
properties.drop(['Area (sq. ft.)','Bedrooms', 'Bathrooms'], axis=1, inplace=True)
properties

from sklearn.model_selection import train_test_split
 
X = properties.drop(["Price (THB)"],axis =1)
y = properties["Price (THB)"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

from sklearn.preprocessing import StandardScaler
numerical_features = ['dimension']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""#**Model Development**"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""#**Evaluasi Model**"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)